# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GISP
                                 A QGIS plugin
 plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-03-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Isidora Petrusic
        email                : isidorapetrusic@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import math
from qgis.PyQt.QtCore import *
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *
from qgis.core import QgsProject
import processing
from qgis.core import *
from qgis.core import QgsRasterLayer
from qgis.utils import iface

from qgis.analysis import QgsRasterCalculator, QgsRasterCalculatorEntry
import webbrowser
import re
import glob

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .GISP_dialog import GISPDialog
import os.path

class GISP:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GISP_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)
            
            
        self.dlg = GISPDialog()
        
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GISP')
        
        self.toolbar=self.iface.addToolBar(u'GISP')
        self.toolbar.setObjectName(u'GISP')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
     

        # noinspection PyMethodMayBeStatic
        
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GISP', message)
        
    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        
       

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/GISP/fire.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GISP'),
            callback=self.run,
            parent=self.iface.mainWindow())
            
        # will be set False in run()
        self.first_start = True
        
        self.dlg.pushButton.clicked.connect(self.ucitavanjeFoldera)
        self.dlg.pushButton_2.clicked.connect(self.ucitavanjeFoldera_dva)
        self.dlg.pushButton_3.clicked.connect(self.ucitavanjeVektora)
        self.dlg.pushButton_4.clicked.connect(self.iscitavanjePodataka)

        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&GISP'),
                action)
            self.iface.removeToolBarIcon(action)
         
        
    def ucitavanjeFoldera(self):
        input_folder = QFileDialog()
        ff=input_folder.getExistingDirectory(self.dlg, "Select input folder ")
        input_folder=ff
        self.dlg.output.setText(input_folder)
        self.folder_1 = input_folder    

    def ucitavanjeFoldera_dva(self):
        input_folder_2 = QFileDialog()
        ff2=input_folder_2.getExistingDirectory(self.dlg, "Select input folder ")
        input_folder_2=ff2
        self.dlg.output_2.setText(input_folder_2)
        self.folder_2 = input_folder_2
        
    def ucitavanjeVektora(self):
        input_vector = QFileDialog.getOpenFileName(self.dlg, "Select input vector ","",'')
        input_vector = input_vector[0]
        self.dlg.output_3.setText(input_vector)
        self.vektor = input_vector
      
    def iscitavanjePodataka(self):
        output_file = QFileDialog.getSaveFileName(self.dlg, "Select output file ","",'')
        output_file = output_file[0]
        self.dlg.output_4.setText(output_file+'.sdat')
        self.output = output_file+'.sdat'
        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        #if self.first_start == True:
        #    self.first_start = False
        #    self.dlg = GISPDialog()
    
           
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        
        
        # See if OK was pressed
        if result:
            #self.dlg.output.clear()
            project = QgsProject.instance()
#            print(result)
                
            v= self.vektor    
                
            x=[]    
            for name in glob.glob(str(self.folder_1)+'/**/**/**/*20*/*.jp2'):
                putanja1=os.path.normpath(name)
                putanja2=putanja1.replace(os.sep, '/')
                x.append(putanja2)
                
            y=[]
            for name in glob.glob(str(self.folder_2)+'/**/**/**/*20*/*.jp2'):
                putanja1=os.path.normpath(name)
                putanja2=putanja1.replace(os.sep, '/')
                y.append(putanja2)
                
            z=[]
            for name in glob.glob(str(self.folder_1)+'/**/**/QI*/MSK_CLDPRB_20m.jp2'):
                putanja1=os.path.normpath(name)
                putanja2=putanja1.replace(os.sep, '/')
                z.append(putanja2)
                
            q=[]
            for name in glob.glob(str(self.folder_2)+'/**/**/QI*/MSK_CLDPRB_20m.jp2'):
                putanja1=os.path.normpath(name)
                putanja2=putanja1.replace(os.sep, '/')
                q.append(putanja2)
                
            rlayer1=iface.addRasterLayer(x[9], 'nir_prije')
            rlayer2=iface.addRasterLayer(x[7], 'swirs_prije')
            rlayer3=iface.addRasterLayer(x[8], 'swirl_prije')
            rlayer4=iface.addRasterLayer(y[9], 'nir_poslije')
            rlayer5=iface.addRasterLayer(y[7], 'swirs_poslije')
            rlayer6=iface.addRasterLayer(y[8], 'swirl_poslije')
            rlayer7=iface.addRasterLayer(z[0], 'oblaci_prije')
            rlayer8=iface.addRasterLayer(q[0], 'oblaci_poslije')
            rlayer9=iface.addRasterLayer(x[10], 'voda')
            
            lista_rlayer=[rlayer1, rlayer2,rlayer3,rlayer4,rlayer5,rlayer6,rlayer7,rlayer8,rlayer9]

            izlaz1= self.output
            izlaz2=os.path.normpath(izlaz1)
            izlaz_kon=izlaz2.replace(os.sep, '/')
            p1=os.path.splitext(izlaz_kon)

            i1 = p1[0]+ '_1.tif'

            i2 = p1[0]+ '_2.tif'
            
            i3 = p1[0]+ '_3.tif'
                        
            i4 = p1[0]+ '_4.tif'
            
            i5 = p1[0]+ '_5.tif'
            
            i6 = p1[0]+ '_6.tif'

            i7 = p1[0]+ '_7.tif' 

            i8 = p1[0]+ '_8' + p1[1]
            
            i9 = p1[0]+ '_shp.shp'
            
            i10 = p1[0]+ '_izvjestaj.txt'
                   

            params1 = {'INPUT': x[7],
                      'MASK': v,
                      'NODATA': 255.0,
                      'ALPHA_BAND': False,
                      'CROP_TO_CUTLINE': True,
                      'KEEP_RESOLUTION': True,
                      'OPTIONS': 'COMPRESS=LZW',
                      'DATA_TYPE': 0,  # Byte
                      'OUTPUT': i1,
                       }          
                                   
            processing.runAndLoadResults("gdal:cliprasterbymasklayer",params1)
            
            
            params2 = { 'CELLSIZE' : 0, 
                        'CRS' : QgsCoordinateReferenceSystem('EPSG:4326'),
                        'EXPRESSION' : '10*\'swirl_prije@1\'-9.8*\'swirs_prije@1\'+2',
                        'EXTENT' : None,  
                        'LAYERS' : [i1],  
                        'OUTPUT' : i2
                       }

            processing.run("qgis:rastercalculator", params2)
            
            
            params3 = { 'CELLSIZE' : 0,
                        'CRS' : QgsCoordinateReferenceSystem('EPSG:4326'), 
                        'EXPRESSION' : '(\"swirs_prije@1\"-\"swirl_prije@1\")/(\"swirs_prije@1\" + \"swirl_prije@1\")',
                        'EXTENT' : None,
                        'LAYERS' : [i1],
                        'OUTPUT' : i3
                        }

            processing.run("qgis:rastercalculator", params3)
            
            rlayer10=iface.addRasterLayer(i2, 'MIRBI_prije')
            
            rlayer11=iface.addRasterLayer(i3, 'NBR2_prije')

            lista_rlayer.extend((rlayer10, rlayer11))

            params4 = { 'CELLSIZE' : 0,
                        'CRS' : QgsCoordinateReferenceSystem('EPSG:4326'), 
                        'EXPRESSION' : '\'swirl_poslije@1\'*10 - \'swirs_poslije@1\'*9.8 + 2',
                        'EXTENT' : None,
                        'LAYERS' : [i1],
                        'OUTPUT' : i4
                        }

            processing.run("qgis:rastercalculator", params4)
            
            params5 = { 'CELLSIZE' : 0,
                        'CRS' : QgsCoordinateReferenceSystem('EPSG:4326'), 
                        'EXPRESSION' : '(\'swirs_poslije@1\' - \'swirl_poslije@1\')/(\'swirs_poslije@1\' + \'swirl_poslije@1\')',
                        'EXTENT' : None,
                        'LAYERS' : [i1],
                        'OUTPUT' : i5
                        }

            processing.run("qgis:rastercalculator", params5)
            
            rlayer12=iface.addRasterLayer(i4, 'MIRBI_poslije')
            
            rlayer13=iface.addRasterLayer(i5, 'NBR2_poslije')
            
            lista_rlayer.extend((rlayer12, rlayer13))
            
            provider1=rlayer12.dataProvider()
            ext1=rlayer12.extent()
            stats1=provider1.bandStatistics(1,QgsRasterBandStats.All,ext1,0)
            srVr_MIRBI=stats1.mean

            provider2=rlayer13.dataProvider()
            ext2=rlayer13.extent()
            stats2=provider2.bandStatistics(1,QgsRasterBandStats.All,ext2,0)
            srVr_NBR2=stats2.mean
            
            provider3=rlayer4.dataProvider()
            ext3=rlayer4.extent()
            stats3=provider3.bandStatistics(1,QgsRasterBandStats.All,ext3,0)
            srVr_NIR=stats3.mean
                            
            params6 = { 'CELLSIZE' : 0,
                        'CRS' : QgsCoordinateReferenceSystem('EPSG:4326'),
                        'EXPRESSION' : '\'MIRBI_poslije@1\'>'+str(srVr_MIRBI)+' and (\'MIRBI_poslije@1\'- \'MIRBI_prije@1\')>0.25 and \'NBR2_poslije@1\'<'+str(srVr_NBR2)+' and (\'NBR2_poslije@1\'-\'NBR2_prije@1\')<-0.05 and \'nir_poslije@1\'<'+str(srVr_NIR)+' and (\'nir_poslije@1\'-\'nir_prije@1\')<-0.01 and \'oblaci_prije@1\'=0  and \'oblaci_poslije@1\'=0 and \'voda@1\'!=6', 
                        'EXTENT' : None,
                        'LAYERS' : [i1],
                        'OUTPUT' : i6
                        }
            
            processing.run("qgis:rastercalculator", params6)
            
            params7 = {'INPUT': i6,
                      'MASK': v,
                      'NODATA': 255.0,
                      'ALPHA_BAND': False,
                      'CROP_TO_CUTLINE': True,
                      'KEEP_RESOLUTION': True,
                      'OPTIONS': 'COMPRESS=LZW',
                      'DATA_TYPE': 0,  # Byte
                      'OUTPUT': i7,
                      }                                           
                                   
            processing.runAndLoadResults("gdal:cliprasterbymasklayer",params7)
            
            params8={ 'INPUT' : i7,
                      'METHOD' : 1,
                      'MODE' : 0, 
                      'RADIUS' : 1, 
                      'RESULT' : i8 
                      }
            processing.runAndLoadResults("saga:morphologicalfilter",params8)
            
            params9={ 'INPUT' : i8,
                      'METHOD' : 0,
                      'MODE' : 0,
                      'RADIUS' : 1,
                      'RESULT' : izlaz_kon 
                      }
                      
            processing.runAndLoadResults("saga:morphologicalfilter",params9)
                                 
            params10={ 'BAND' : 1,
                       'EIGHT_CONNECTEDNESS' : True,
                       'EXTRA' : '',
                       'FIELD' : 'DN',
                       'INPUT' : izlaz_kon,
                       'OUTPUT' : i9
                       }
                       
            processing.runAndLoadResults('gdal:polygonize', params10)
            
            povrsina=0
            vlayer=QgsVectorLayer(i9,"vektor","ogr")            
            '''features=vlayer.getFeatures('"DN"=1')
            
            for f in features:
                geom=f.geometry()
                povrsina+=geom.area()'''
            
            
            
            pv=vlayer.dataProvider()
            pv.addAttributes([QgsField('povrsina',QVariant.Double)])
            vlayer.updateFields()
            e1=QgsExpression('$area')
            context=QgsExpressionContext()
            context.appendScopes(QgsExpressionContextUtils.globalProjectLayerScopes(vlayer))
            with edit(vlayer):
                for f in vlayer.getFeatures():
                    context.setFeature(f)
                    f['povrsina']=e1.evaluate(context)
                    vlayer.updateFeature(f)
            
            pov=vlayer.dataProvider().fieldNameIndex('povrsina')
            for f in vlayer.getFeatures('"DN"=1'):
                povrsina+=f.attributes()[pov]
            
            povrsina=povrsina/1000000
            
            for layer in lista_rlayer:
                QgsProject.instance().removeMapLayer(layer.id())
             
            v=os.path.basename(i1)
            vv=os.path.splitext(v)
            j=QgsProject.instance().mapLayersByName(vv[0])
            QgsProject.instance().removeMapLayer(j[0].id())            
            
            v2=os.path.basename(i7)
            vv2=os.path.splitext(v2)
            j2=QgsProject.instance().mapLayersByName(vv2[0])
            QgsProject.instance().removeMapLayer(j2[0].id())
            
            v3=os.path.basename(i8)
            vv3=os.path.splitext(v3)
            j3=QgsProject.instance().mapLayersByName(vv3[0])
            QgsProject.instance().removeMapLayer(j3[0].id())
            
            izvjestaj=i10
            output_file_izvjestaj = open(izvjestaj, 'w')
            output_file_izvjestaj.write('Ukupna povrsina izgorjelog podrucja iznosi ' + str(povrsina) + ' km\u00b2.')
            webbrowser.open(i10)
            
            lista_brisanje=[i1,i2,i3,i4,i5,i6,i7]
            for l in lista_brisanje:
                os.remove(l)

            putanja_sdat = p1[0]+ '_8'  
            ekst=['.mgrd', '.sdat', '.prj','.sdat.aux.xml', '.sgrd']
            for e in ekst:
                os.remove(putanja_sdat+e)

        print(result)
          
            
            
            
           # pass
